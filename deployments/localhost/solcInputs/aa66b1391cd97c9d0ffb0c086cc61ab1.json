{
  "language": "Solidity",
  "sources": {
    "contracts/anang42/Perpustakaan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ncontract Perpustakaan {\n    // Anangprasetya\n    address public admin;\n    \n    struct Book {\n        string ISBN;\n        string title;\n        uint128 year;\n        string author;\n    }\n    \n    mapping(string => Book) public books;\n    \n    event BookAdded(string ISBN, string title, uint128 year, string author);\n    event BookUpdated(string ISBN, string title, uint128 year, string author);\n    event BookRemoved(string ISBN);\n    \n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can perform this action\");\n        _;\n    }\n    \n    constructor() {\n        admin = msg.sender;\n    }\n    \n    function store(string calldata _ISBN, string calldata _title, uint128 _year, string calldata _author) public onlyAdmin {\n        require(bytes(_ISBN).length > 0, \"ISBN cannot be empty\");\n        require(bytes(_title).length > 0, \"Title cannot be empty\");\n        require(bytes(_author).length > 0, \"Author cannot be empty\");\n        \n        require(books[_ISBN].year == 0, \"Book with this ISBN already exists\");\n        \n        books[_ISBN] = Book(_ISBN, _title, _year, _author);\n        emit BookAdded(_ISBN, _title, _year, _author);\n    }\n\n    function update(string memory _ISBN, string memory _title, uint128 _year, string memory _author) public onlyAdmin {\n        require(bytes(_ISBN).length > 0, \"ISBN cannot be empty\");\n        require(bytes(_title).length > 0, \"Title cannot be empty\");\n        require(bytes(_author).length > 0, \"Author cannot be empty\");\n        \n        require(books[_ISBN].year != 0, \"Book with this ISBN does not exist\");\n        \n        books[_ISBN] = Book(_ISBN, _title, _year, _author);\n        emit BookUpdated(_ISBN, _title, _year, _author);\n    }\n    \n    function destroy(string calldata _ISBN) public onlyAdmin {\n        require(books[_ISBN].year != 0, \"Book with this ISBN does not exist\");\n        delete books[_ISBN];\n        emit BookRemoved(_ISBN);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}